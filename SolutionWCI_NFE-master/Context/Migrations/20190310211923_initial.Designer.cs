// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Context.Migrations
{
    [DbContext(typeof(SolutionContext))]
    [Migration("20190310211923_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Accounts.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("EmailAccount");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("AccountId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("ACC_Account");
                });

            modelBuilder.Entity("Model.Common.City", b =>
                {
                    b.Property<int>("CityId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("StateId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("COM_City");
                });

            modelBuilder.Entity("Model.Common.PersonalInformation", b =>
                {
                    b.Property<int>("PersonalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("AddressComplement")
                        .HasMaxLength(100);

                    b.Property<string>("AddressNumber")
                        .HasMaxLength(10);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(150);

                    b.Property<int?>("CityId");

                    b.Property<Guid?>("CompanyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("IndividualResistration")
                        .HasMaxLength(20);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(70);

                    b.Property<string>("PhoneNumbers")
                        .HasMaxLength(150);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<int?>("StateId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("PersonalInformationId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StateId");

                    b.ToTable("COM_Personal_Information");
                });

            modelBuilder.Entity("Model.Common.State", b =>
                {
                    b.Property<int>("StateId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("ExternalCode");

                    b.Property<string>("FederativeUnit")
                        .HasMaxLength(2);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("COM_State");
                });

            modelBuilder.Entity("Model.Companies.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("AddressComplement")
                        .HasMaxLength(250);

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CNAE")
                        .HasMaxLength(20);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(150);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FantasyName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("MunicipalityRegistration")
                        .HasMaxLength(20);

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("PhoneNumbers")
                        .HasMaxLength(150);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<int>("StateId");

                    b.Property<string>("StateRegistration")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("StateRegistrationReplaceTributary")
                        .HasMaxLength(20);

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UrlLogo");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("CompanyId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("COM_Company");
                });

            modelBuilder.Entity("Model.Companies.CompanyConfigNFe", b =>
                {
                    b.Property<int>("CompanyConfigNFeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("CurrentNumberNfe");

                    b.Property<int>("EnvironmentNFE");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<string>("VersionNfe")
                        .IsRequired();

                    b.HasKey("CompanyConfigNFeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("COM_Company_Config_NFe");
                });

            modelBuilder.Entity("Model.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("AddressComplement")
                        .HasMaxLength(100);

                    b.Property<string>("AddressNumber")
                        .HasMaxLength(10);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(150);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("MunicipalityRegistration")
                        .HasMaxLength(20);

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(150);

                    b.Property<string>("PhoneNumbers")
                        .HasMaxLength(150);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<int>("StateId");

                    b.Property<string>("StateRegistration")
                        .HasMaxLength(20);

                    b.Property<string>("Suframa")
                        .HasMaxLength(100);

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("CUS_Customer");
                });

            modelBuilder.Entity("Model.Invoices.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessKey")
                        .IsRequired();

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<string>("AdditionalInformationFiscal")
                        .HasMaxLength(255);

                    b.Property<string>("AdditionalInformationTaxpayer")
                        .HasMaxLength(255);

                    b.Property<int>("CityId");

                    b.Property<int>("CodeNumbericInvoce");

                    b.Property<Guid>("CompanyId");

                    b.Property<int>("ConsumerFinal");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("CustomerId");

                    b.Property<int>("CustomerService");

                    b.Property<DateTime>("DateEmission");

                    b.Property<DateTime?>("DateInputContingency");

                    b.Property<DateTime>("DateInputExit");

                    b.Property<int>("DestinationOperation");

                    b.Property<int>("EmissionForm");

                    b.Property<int>("EmissionPurpose");

                    b.Property<int>("FreightMode");

                    b.Property<int>("InvoiceNatureOperationId");

                    b.Property<int>("InvoiceStatus");

                    b.Property<string>("JustificationInputContigency")
                        .HasMaxLength(255);

                    b.Property<string>("ModelInvoce")
                        .IsRequired();

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("NatureOperation")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<int>("NumberInvoce");

                    b.Property<int?>("OrderId");

                    b.Property<int>("PaymentForm");

                    b.Property<int>("SeriesInvoce");

                    b.Property<int?>("ShippingCompanyId");

                    b.Property<int>("StateId");

                    b.Property<int>("TypeDocument");

                    b.Property<int>("TypePrint");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<int>("VerifyingDigit");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceNatureOperationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShippingCompanyId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceCFOP", b =>
                {
                    b.Property<int>("InvoiceCFOPId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("InvoiceCFOPId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_CFOP");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceNatureOperation", b =>
                {
                    b.Property<int>("InvoiceNatureOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<string>("AdditionalInformationFiscal")
                        .HasMaxLength(255);

                    b.Property<string>("AdditionalInformationTaxpayer")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("InvoiceNatureOperationId");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_NatureOperation");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceProduct", b =>
                {
                    b.Property<int>("InvoiceProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("AliquotCOFINS")
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal>("AliquotICMS")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("AliquotIPI")
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal>("AliquotPIS")
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("ApproximateTotalTaxes")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BaseCalculationICMS")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CFOP")
                        .IsRequired();

                    b.Property<string>("CST")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("CodeFrameworkLegal")
                        .HasMaxLength(5);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("EuropeanArticleNumber")
                        .HasMaxLength(14);

                    b.Property<string>("EuropeanArticleNumberUT")
                        .HasMaxLength(14);

                    b.Property<int>("InvoiceCFOPId");

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ModalityDeterminationICMS");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("ProductCOFINSId");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("ProductICMSId");

                    b.Property<int>("ProductIPIId");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductNCM")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("ProductName")
                        .HasMaxLength(120);

                    b.Property<int>("ProductOrigin");

                    b.Property<int>("ProductPISId");

                    b.Property<string>("ProductTributarySituationCOFINS");

                    b.Property<string>("ProductTributarySituationIPI")
                        .IsRequired();

                    b.Property<string>("ProductTributarySituationPIS");

                    b.Property<decimal>("TributaryAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Unit")
                        .HasMaxLength(20);

                    b.Property<string>("UnitTributary")
                        .IsRequired();

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<decimal>("ValueCOFINS")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal>("ValueICMS")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ValueIPI")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ValuePIS")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal>("ValueTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ValueTributaryUnit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ValueUnit")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("InvoiceProductId");

                    b.HasIndex("InvoiceCFOPId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductCOFINSId");

                    b.HasIndex("ProductICMSId");

                    b.HasIndex("ProductIPIId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPISId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_Product");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceRelated", b =>
                {
                    b.Property<int>("InvoiceRelatedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessKey");

                    b.Property<bool>("Active");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DateEmission");

                    b.Property<string>("ModelInvoce");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("NumberInvoce");

                    b.Property<int>("SeriesInvoce");

                    b.Property<int>("Type");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("InvoiceRelatedId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_Related");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceRelatedCoupon", b =>
                {
                    b.Property<int>("InvoiceRelatedCouponId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AmountOrderOperational");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ModelCoupon");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("SequentialOrderNumber");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("InvoiceRelatedCouponId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_Related_Coupon");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceRelatedProducer", b =>
                {
                    b.Property<int>("InvoiceRelatedProducerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DateEmission");

                    b.Property<int>("Model");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("NumberInvoce");

                    b.Property<int>("SeriesInvoce");

                    b.Property<int>("StateId");

                    b.Property<string>("StateRegistration")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("InvoiceRelatedProducerId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_Related_Producer");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceTicket", b =>
                {
                    b.Property<int>("InvoiceTicketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("InvoiceId");

                    b.Property<DateTime>("MaturityDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("InvoiceTicketId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_Tickets");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceVehicle", b =>
                {
                    b.Property<int>("InvoiceVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CodeAntt")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("InvoiceId");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("PlaqueVehicle")
                        .HasMaxLength(60);

                    b.Property<int>("StateId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("InvoiceVehicleId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_Vehicle");
                });

            modelBuilder.Entity("Model.Invoices.InvoiceVolumes", b =>
                {
                    b.Property<int>("InvoiceVolumesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Brand")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreateDate");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("InvoiceId");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<decimal>("NetWeight")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Numbering")
                        .HasMaxLength(60);

                    b.Property<string>("Species")
                        .HasMaxLength(60);

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("InvoiceVolumesId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("INV_Invoice_Volumes");
                });

            modelBuilder.Entity("Model.Orders.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("OrderId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("ORD_Order");
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_X_ProductCOFINS", b =>
                {
                    b.Property<int>("PRO_Product_X_ProductCOFINSId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("ProductCOFINSId");

                    b.Property<int>("ProductId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("PRO_Product_X_ProductCOFINSId");

                    b.HasIndex("ProductCOFINSId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_X_ProductCOFINS");
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_X_ProductIPI", b =>
                {
                    b.Property<int>("PRO_Product_X_ProductIPIId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("ProductIPIId");

                    b.Property<int>("ProductId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("PRO_Product_X_ProductIPIId");

                    b.HasIndex("ProductIPIId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_X_ProductIPI");
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_X_ProductPIS", b =>
                {
                    b.Property<int>("PRO_Product_X_ProductPISId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductPISId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("PRO_Product_X_ProductPISId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPISId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_X_ProductPIS");
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_x_ProductICMS", b =>
                {
                    b.Property<int>("PRO_Product_x_ProductICMSId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("ProductICMSId");

                    b.Property<int>("ProductId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("PRO_Product_x_ProductICMSId");

                    b.HasIndex("ProductICMSId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_x_ProductICMS");
                });

            modelBuilder.Entity("Model.Products.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<string>("CEST")
                        .HasMaxLength(7);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("EuropeanArticleNumber")
                        .HasMaxLength(14);

                    b.Property<string>("EuropeanArticleNumberUT")
                        .HasMaxLength(14);

                    b.Property<string>("ExTipi")
                        .HasMaxLength(3);

                    b.Property<string>("Genre")
                        .HasMaxLength(4);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("ProductNCMId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<int>("ProductUnitCommercialId");

                    b.Property<int>("ProductUnitTributaryId");

                    b.Property<decimal>("TributaryAmount")
                        .HasColumnType("decimal(10,4)");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<decimal>("ValueCommercialUnit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("ValueTributaryUnit")
                        .HasColumnType("decimal(10,4)");

                    b.HasKey("ProductId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductNCMId");

                    b.HasIndex("ProductUnitCommercialId");

                    b.HasIndex("ProductUnitTributaryId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product");
                });

            modelBuilder.Entity("Model.Products.ProductCOFINS", b =>
                {
                    b.Property<int>("ProductCOFINSId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal?>("AliquotPercentage")
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal?>("AliquotPercentage_ST")
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal?>("AliquotValue")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("AliquotValue_ST")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("AmountSold")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("AmountSold_ST")
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("ProductTributarySituationCOFINSId");

                    b.Property<int>("TypeCalculationCOFINS");

                    b.Property<int>("TypeCalculationCOFINS_ST");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<decimal?>("ValueBaseCalculation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ValueBaseCalculation_ST")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ValueOfCOFINS")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("ValueOfCOFINS_ST")
                        .HasColumnType("decimal(12,4)");

                    b.HasKey("ProductCOFINSId");

                    b.HasIndex("ProductTributarySituationCOFINSId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_COFINS");
                });

            modelBuilder.Entity("Model.Products.ProductExonerationReasonICMS", b =>
                {
                    b.Property<int>("ProductExonerationReasonICMSId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductExonerationReasonICMSId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Exoneration_Reason_ICMS");
                });

            modelBuilder.Entity("Model.Products.ProductICMS", b =>
                {
                    b.Property<int>("ProductICMSId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal?>("AliquotICMS")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("AliquotICMS_ST")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("ApplicableRateCreditCalculation")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("BCICMS")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("BCICMS_ST")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("BCIcmsSTPreviouslyRetained")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreateDate");

                    b.Property<decimal?>("DeductionICMS")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("DeductionICMS_ST")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("ICMS_ST")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("IcmsCreditCanBeAvalied")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("IcmsSTPreviouslyRetained")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("MaginValueAddedICMS_ST")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ModalityDeterminationICMS");

                    b.Property<int?>("ModalityDeterminationICMS_ST");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<decimal?>("OperationOwn")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductExonerationReasonICMSId");

                    b.Property<int?>("ProductOriginId");

                    b.Property<int>("ProductTributarySituationICMSId");

                    b.Property<int>("Regime");

                    b.Property<int?>("StateId");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductICMSId");

                    b.HasIndex("ProductExonerationReasonICMSId");

                    b.HasIndex("ProductOriginId");

                    b.HasIndex("ProductTributarySituationICMSId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_ICMS");
                });

            modelBuilder.Entity("Model.Products.ProductIPI", b =>
                {
                    b.Property<int>("ProductIPIId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal?>("Aliquot")
                        .HasColumnType("decimal(4,4)");

                    b.Property<int?>("AmountCodeSealControl");

                    b.Property<decimal?>("AmountTotalUnitDefault")
                        .HasColumnType("decimal(12,4)");

                    b.Property<string>("ClassFramework")
                        .HasMaxLength(5);

                    b.Property<string>("CodeFrameworkLegal")
                        .HasMaxLength(5);

                    b.Property<string>("CodeSealControl")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("ProducerCNPJ")
                        .HasMaxLength(20);

                    b.Property<int>("ProductTributarySituationIPIId");

                    b.Property<int>("TypeCalculation");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<decimal?>("ValueBaseCalculation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ValueOfIPI")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("ValuePerUnit")
                        .HasColumnType("decimal(12,4)");

                    b.HasKey("ProductIPIId");

                    b.HasIndex("ProductTributarySituationIPIId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_IPI");
                });

            modelBuilder.Entity("Model.Products.ProductNCM", b =>
                {
                    b.Property<int>("ProductNCMId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<decimal?>("AliquotICMSDestination")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("AliquotICMSOrigin")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("BCICMS")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("BCICMS_ST")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreateDate");

                    b.Property<decimal?>("MarginValueAggregate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("NCM")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<decimal>("Simple")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("SimpleTaxSubstitution")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<decimal?>("ValueIcms_ST")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ProductNCMId");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_ProductNCM");
                });

            modelBuilder.Entity("Model.Products.ProductOriginICMS", b =>
                {
                    b.Property<int>("ProductOriginId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductOriginId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Origin_ICMS");
                });

            modelBuilder.Entity("Model.Products.ProductPIS", b =>
                {
                    b.Property<int>("ProductPISId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal?>("AliquotPercentage")
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal?>("AliquotPercentage_ST")
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal?>("AliquotValue")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("AliquotValue_ST")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("AmountSold")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("AmountSold_ST")
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("ProductTributarySituationPISId");

                    b.Property<int>("TypeCalculationPIS");

                    b.Property<int>("TypeCalculationPIS_ST");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.Property<decimal?>("ValueBaseCalculation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ValueBaseCalculation_ST")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ValueOfPIS")
                        .HasColumnType("decimal(12,4)");

                    b.Property<decimal?>("ValueOfPIS_ST")
                        .HasColumnType("decimal(12,4)");

                    b.HasKey("ProductPISId");

                    b.HasIndex("ProductTributarySituationPISId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_PIS");
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationCOFINS", b =>
                {
                    b.Property<int>("ProductTributarySituationCOFINSId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductTributarySituationCOFINSId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Tributary_Situation_COFINS");
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationICMS", b =>
                {
                    b.Property<int>("ProductTributarySituationICMSId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("Regime");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductTributarySituationICMSId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Tributary_Situation_ICMS");
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationIPI", b =>
                {
                    b.Property<int>("ProductTributarySituationIPIId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductTributarySituationIPIId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Tributary_Situation_IPI");
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationPIS", b =>
                {
                    b.Property<int>("ProductTributarySituationPISId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductTributarySituationPISId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Tributary_Situation_PIS");
                });

            modelBuilder.Entity("Model.Products.ProductUnitCommercial", b =>
                {
                    b.Property<int>("ProductUnitCommercialId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductUnitCommercialId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Unit_Commercial");
                });

            modelBuilder.Entity("Model.Products.ProductUnitTributary", b =>
                {
                    b.Property<int>("ProductUnitTributaryId");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ProductUnitTributaryId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("PRO_Product_Unit_Tributary");
                });

            modelBuilder.Entity("Model.ShippingCompanies.ShippingCompany", b =>
                {
                    b.Property<int>("ShippingCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("AddressComplement")
                        .HasMaxLength(100);

                    b.Property<string>("AddressNumber")
                        .HasMaxLength(10);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(150);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("FreeICMS");

                    b.Property<DateTime>("ModifieldDate");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(150);

                    b.Property<string>("PhoneNumbers")
                        .HasMaxLength(150);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<int>("StateId");

                    b.Property<string>("StateRegistration")
                        .HasMaxLength(20);

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("UserID");

                    b.Property<int>("UserIDLastUpdate");

                    b.HasKey("ShippingCompanyId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserID");

                    b.HasIndex("UserIDLastUpdate");

                    b.ToTable("SHC_Shipping_Company ");
                });

            modelBuilder.Entity("Model.Accounts.Account", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Common.City", b =>
                {
                    b.HasOne("Model.Common.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Common.PersonalInformation", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.City", "City")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Companies.Company", "Company")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.State", "State")
                        .WithMany("PersonalInformations")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Common.State", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Companies.Company", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("Companies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.State", "State")
                        .WithMany("Companies")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Companies.CompanyConfigNFe", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Companies.Company", "Company")
                        .WithOne("CompanyConfigNFe")
                        .HasForeignKey("Model.Companies.CompanyConfigNFe", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Customers.Customer", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.State", "State")
                        .WithMany("Customers")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.Invoice", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.City", "City")
                        .WithMany("Invoces")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Companies.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Customers.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Invoices.InvoiceNatureOperation", "InvoiceNatureOperation")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceNatureOperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("Model.ShippingCompanies.ShippingCompany", "ShippingCompany")
                        .WithMany()
                        .HasForeignKey("ShippingCompanyId");

                    b.HasOne("Model.Common.State", "State")
                        .WithMany("Invoces")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceCFOP", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceNatureOperation", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("InvoiceNatureOperations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceProduct", b =>
                {
                    b.HasOne("Model.Invoices.InvoiceCFOP", "InvoiceCFOP")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceCFOPId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Invoices.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Products.ProductCOFINS", "ProductCOFINS")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductCOFINSId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.ProductICMS", "ProductICMS")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductICMSId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.ProductIPI", "ProductIPI")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductIPIId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.Product", "Product")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.ProductPIS", "ProductPIS")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductPISId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceRelated", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceRelatedCoupon", b =>
                {
                    b.HasOne("Model.Invoices.Invoice", "Invoice")
                        .WithMany("InvoiceRelatedCoupons")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceRelatedProducer", b =>
                {
                    b.HasOne("Model.Common.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceTicket", b =>
                {
                    b.HasOne("Model.Invoices.Invoice", "Invoice")
                        .WithMany("InvoiceTickets")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceVehicle", b =>
                {
                    b.HasOne("Model.Invoices.Invoice", "Invoice")
                        .WithMany("InvoiceVehicles")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.State", "State")
                        .WithMany("InvoiceVehicles")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Invoices.InvoiceVolumes", b =>
                {
                    b.HasOne("Model.Invoices.Invoice", "Invoice")
                        .WithMany("InvoiceVolumess")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Orders.Order", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_X_ProductCOFINS", b =>
                {
                    b.HasOne("Model.Products.ProductCOFINS", "ProductCOFINS")
                        .WithMany("PRO_Product_X_ProductCOFINS")
                        .HasForeignKey("ProductCOFINSId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.Product", "Product")
                        .WithMany("PRO_Product_X_ProductCOFINS")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_X_ProductIPI", b =>
                {
                    b.HasOne("Model.Products.ProductIPI", "ProductIPI")
                        .WithMany("PRO_Product_X_ProductIPI")
                        .HasForeignKey("ProductIPIId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.Product", "Product")
                        .WithMany("PRO_Product_X_ProductIPI")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_X_ProductPIS", b =>
                {
                    b.HasOne("Model.Products.Product", "Product")
                        .WithMany("PRO_Product_X_ProductPIS")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.ProductPIS", "ProductPIS")
                        .WithMany("PRO_Product_X_ProductPIS")
                        .HasForeignKey("ProductPISId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ManyToMany.PRO_Product_x_ProductICMS", b =>
                {
                    b.HasOne("Model.Products.ProductICMS", "ProductICMS")
                        .WithMany("PRO_Product_x_ProductICMS")
                        .HasForeignKey("ProductICMSId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.Product", "Product")
                        .WithMany("PRO_Product_x_ProductICMS")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.Product", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("Products")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.ProductNCM", "ProductNCM")
                        .WithMany("Products")
                        .HasForeignKey("ProductNCMId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Products.ProductUnitCommercial", "ProductUnitCommercial")
                        .WithMany("Products")
                        .HasForeignKey("ProductUnitCommercialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Products.ProductUnitTributary", "ProductUnitTributary")
                        .WithMany("Products")
                        .HasForeignKey("ProductUnitTributaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductCOFINS", b =>
                {
                    b.HasOne("Model.Products.ProductTributarySituationCOFINS", "ProductTributarySituationCOFINS")
                        .WithMany("ProductCOFINSs")
                        .HasForeignKey("ProductTributarySituationCOFINSId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductExonerationReasonICMS", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductICMS", b =>
                {
                    b.HasOne("Model.Products.ProductExonerationReasonICMS", "ProductExonerationReasonICMS")
                        .WithMany("ProductICMSs")
                        .HasForeignKey("ProductExonerationReasonICMSId");

                    b.HasOne("Model.Products.ProductOriginICMS", "ProductOrigin")
                        .WithMany("ProductICMSs")
                        .HasForeignKey("ProductOriginId");

                    b.HasOne("Model.Products.ProductTributarySituationICMS", "ProductTributarySituationICMS")
                        .WithMany("ProductICMSs")
                        .HasForeignKey("ProductTributarySituationICMSId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.State", "State")
                        .WithMany("ProductICMSs")
                        .HasForeignKey("StateId");

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductIPI", b =>
                {
                    b.HasOne("Model.Products.ProductTributarySituationIPI", "ProductTributarySituationIPI")
                        .WithMany("ProductIPIs")
                        .HasForeignKey("ProductTributarySituationIPIId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductNCM", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("ProductNCMs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductOriginICMS", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductPIS", b =>
                {
                    b.HasOne("Model.Products.ProductTributarySituationPIS", "ProductTributarySituationPIS")
                        .WithMany("ProductPISs")
                        .HasForeignKey("ProductTributarySituationPISId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationCOFINS", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationICMS", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationIPI", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductTributarySituationPIS", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductUnitCommercial", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Products.ProductUnitTributary", b =>
                {
                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.ShippingCompanies.ShippingCompany", b =>
                {
                    b.HasOne("Model.Accounts.Account", "Account")
                        .WithMany("ShippingCompanies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.City", "City")
                        .WithMany("ShippingCompanies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Common.State", "State")
                        .WithMany("ShippingCompanies")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Common.PersonalInformation", "PersonalInformationUpdate")
                        .WithMany()
                        .HasForeignKey("UserIDLastUpdate")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
